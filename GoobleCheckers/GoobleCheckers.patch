Index: src/main/ai/abstractai.py
===================================================================
--- src/main/ai/abstractai.py	(revision 64)
+++ src/main/ai/abstractai.py	(working copy)
@@ -11,10 +11,10 @@
     def __init__(self, origin=origin.BOTTOM):
         self.origin = origin
         
-    def make_move(self, board):
-        move = self.choose_move(OriginMoves(board, self.origin).get_moves())
+    def make_move(self, game):
+        move = self.choose_move(OriginMoves(game.board, self.origin).get_moves())
         for position_change in move:
-            board.move_piece(position_change.from_loc, position_change.to_loc)
+            game.move_piece(position_change.from_loc, position_change.to_loc)
             
     def choose_move(self, all_moves):
         pass
\ No newline at end of file
Index: src/main/ai/match.py
===================================================================
--- src/main/ai/match.py	(revision 65)
+++ src/main/ai/match.py	(working copy)
@@ -7,14 +7,14 @@
 
 class Match(object):
     
-    def __init__(self, board, ai_top, ai_bottom):
-        self.board = board
+    def __init__(self, game, ai_top, ai_bottom):
+        self.game = game
         self.ai_top = ai_top
         self.ai_bottom = ai_bottom
         
     def go(self):
-        while not self.board.is_game_over():
-            if self.board.current_turn.origin == origin.BOTTOM:
-                self.ai_bottom.make_move(self.board)
+        while not self.game.is_game_over():
+            if self.game.current_turn.origin == origin.BOTTOM:
+                self.ai_bottom.make_move(self.game)
             else:
-                self.ai_top.make_move(self.board)
\ No newline at end of file
+                self.ai_top.make_move(self.game)
\ No newline at end of file
Index: src/main/game/gameplay.py
===================================================================
--- src/main/game/gameplay.py	(revision 0)
+++ src/main/game/gameplay.py	(revision 0)
@@ -0,0 +1,54 @@
+'''
+Created on 2011-12-11
+
+@author: Gooble
+'''
+from main.game.board import Board
+from main.game.turn import Turn
+from main.game.state import State
+from main.ai.originmoves import OriginMoves
+
+class GamePlay(object):
+    
+    def __init__(self):
+        self.board = Board()
+        self.current_turn = Turn(self.board)
+        self.state = State(self.board)
+        
+    def move_piece(self, from_loc, to_loc):
+        self.current_turn.handle_movement(from_loc, to_loc)
+        
+        if self.current_turn.is_over():
+            self.current_turn.handle_jumps()
+            self.king_piece_if_necessary(to_loc)
+            self.current_turn = Turn(self.board, self.current_turn.origin)
+            self.pass_if_needed()
+                
+    def pass_if_needed(self):
+        if len(OriginMoves(self.board, self.current_turn.origin).get_moves()) == 0:
+            self.current_turn = Turn(self.board, self.current_turn.origin)
+            if len(OriginMoves(self.board, self.current_turn.origin).get_moves()) == 0:
+                self.state.set_draw()
+            
+    def king_piece_if_necessary(self, king_loc):
+        piece = self.board.get_piece(king_loc[0], king_loc[1])
+        piece.set_king(self._should_piece_be_king(piece, king_loc[0]))
+        
+    def get_piece(self, row, col):
+        return self.board.get_piece(row, col)
+    
+    def _should_piece_be_king(self, piece, row):
+        if piece.is_king():
+            return True
+        if piece.is_from_top() and row == self.board.DEFAULT_HEIGHT - 1:
+            return True
+        if piece.is_from_bottom() and row == 0:
+            return True
+        return False
+    
+    def set_piece(self, row, col, piece):
+        if self.board.set_piece(row, col, piece):
+            self.state.update_state_for_insertion(row, col, piece)
+    
+    def is_game_over(self):
+        return self.state.is_game_over()
Index: src/main/game/movements/moves.py
===================================================================
--- src/main/game/movements/moves.py	(revision 63)
+++ src/main/game/movements/moves.py	(working copy)
@@ -21,10 +21,10 @@
         return None
     
     def get_pieces_eaten(self):
-        if not self.contains_jump():
-            return 0
-        else:
+        if self.contains_jump():
             return len(self)
+        else:
+            return 0
     
     def contains_jump(self):
         for move in self:
Index: src/main/game/board.py
===================================================================
--- src/main/game/board.py	(revision 62)
+++ src/main/game/board.py	(working copy)
@@ -5,9 +5,6 @@
 '''
 from main.game import origin
 from main.game.piece import Piece
-from main.game.turn import Turn
-from main.game.state import State
-from main.ai.originmoves import OriginMoves
 
 class Board(object):
     
@@ -15,11 +12,6 @@
     DEFAULT_HEIGHT = 8
 
     def __init__(self):
-        self.init_board()
-        self.current_turn = Turn(self)
-        self.state = State(self)
-        
-    def init_board(self):
         self.pieces = []
         for row in range (0, self.DEFAULT_HEIGHT):
             self.pieces.append([self.create_piece(row, col) for col in range(0, self.DEFAULT_WIDTH)])
@@ -46,37 +38,6 @@
     
     def set_piece(self, row, col, piece):
         if self.invalid_position(row, col):
-            return
-        self.state.update_state_for_insertion(row, col, piece)
+            return False
         self.pieces[row][col] = piece
-        
-    def move_piece(self, from_loc, to_loc):
-        self.current_turn.handle_movement(from_loc, to_loc)
-        
-        if self.current_turn.is_over():
-            self.current_turn.handle_jumps()
-            self.king_piece_if_necessary(to_loc)
-            self.current_turn = Turn(self, self.current_turn.origin)
-            self.pass_if_needed()
-                
-    def pass_if_needed(self):
-        if len(OriginMoves(self, self.current_turn.origin).get_moves()) == 0:
-            self.current_turn = Turn(self, self.current_turn.origin)
-            if len(OriginMoves(self, self.current_turn.origin).get_moves()) == 0:
-                self.state.set_draw()
-            
-    def king_piece_if_necessary(self, king_loc):
-        piece = self.get_piece(king_loc[0], king_loc[1])
-        piece.set_king(self._should_piece_be_king(piece, king_loc[0]))
-            
-    def _should_piece_be_king(self, piece, row):
-        if piece.is_king():
-            return True
-        if piece.is_from_top() and row == self.DEFAULT_HEIGHT - 1:
-            return True
-        if piece.is_from_bottom() and row == 0:
-            return True
-        return False
-    
-    def is_game_over(self):
-        return self.state.is_game_over()
+        return True
\ No newline at end of file
Index: src/main/view/gamepanel.py
===================================================================
--- src/main/view/gamepanel.py	(revision 38)
+++ src/main/view/gamepanel.py	(working copy)
@@ -4,25 +4,25 @@
 @author: Gooble
 '''
 from tkinter import Tk
-import main.game.board as board
+import main.game.gameplay as gameplay
 import main.view.slotting
 import main.view.menufactory as menufactory
 import main.view.boardcanvasfactory as boardcanvasfactory
 import main.ai.easyai as easyai
 
-class GamePlay(object):
+class GamePanel(object):
 
     DEFAULT_HEIGHT = 480
     DEFAULT_WIDTH = 480
 
     def __init__(self, canvas_factory=boardcanvasfactory.BoardCanvasFactory(), menu_factory=menufactory.MenuFactory(), ai=None):
-        self.board = board.Board()
+        self.game = gameplay.GamePlay()
         
         self.root = Tk()
         menu_factory.make_menu(self)
         
-        self.slotting = main.view.slotting.Slotting(self.board)
-        self.canvas = canvas_factory.make_canvas(self.root, self.board, self.slotting)
+        self.slotting = main.view.slotting.Slotting(self.game)
+        self.canvas = canvas_factory.make_canvas(self.root, self.game.board, self.slotting)
         self._add_bindings_for_canvas()
         self.ai = ai
 
@@ -41,8 +41,8 @@
         self.check_and_use_ai()
             
     def check_and_use_ai(self):
-        if self.ai is not None and self.board.current_turn.is_computers_turn(self.ai):
-            self.ai.make_move(self.board)
+        if self.ai is not None and self.game.current_turn.is_computers_turn(self.ai):
+            self.ai.make_move(self.game)
             self.canvas.draw()
         
     def start(self):
@@ -50,7 +50,7 @@
         self.check_and_use_ai()
         
     def new_game(self):
-        self.board = board.Board()
+        self.game = gameplay.GamePlay()
         
 if __name__ == '__main__':
-    GamePlay(ai=easyai.EasyAI()).start()
\ No newline at end of file
+    GamePanel(ai=easyai.EasyAI()).start()
\ No newline at end of file

Property changes on: src\main\view\gamepanel.py
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: src/main/view/boardcanvasfactory.py
===================================================================
--- src/main/view/boardcanvasfactory.py	(revision 55)
+++ src/main/view/boardcanvasfactory.py	(working copy)
@@ -4,12 +4,12 @@
 @author: Gooble
 '''
 import main.view.boardcanvas
-import main.view.gameplay
+import main.view.gamepanel
 
 class BoardCanvasFactory(object):
 
     def make_canvas(self, root_pane, board, slotting):
-        canvas = main.view.boardcanvas.BoardCanvas(root_pane, width=main.view.gameplay.GamePlay.DEFAULT_WIDTH, height=main.view.gameplay.GamePlay.DEFAULT_HEIGHT)
+        canvas = main.view.boardcanvas.BoardCanvas(root_pane, width=main.view.gamepanel.GamePanel.DEFAULT_WIDTH, height=main.view.gamepanel.GamePanel.DEFAULT_HEIGHT)
         canvas.set_board(board)
         canvas.set_slotting(slotting)
         canvas.calculate_dimensions()
Index: src/main/view/boardcoordinate.py
===================================================================
--- src/main/view/boardcoordinate.py	(revision 48)
+++ src/main/view/boardcoordinate.py	(working copy)
@@ -4,12 +4,12 @@
 @author: Gooble
 '''
 import main.game.board as board
-import main.view.gameplay
+import main.view.gamepanel
 
 class BoardCoordinate(object):
     
     def __init__(self, 
-                 canvas_size=(main.view.gameplay.GamePlay.DEFAULT_WIDTH, main.view.gameplay.GamePlay.DEFAULT_HEIGHT),
+                 canvas_size=(main.view.gamepanel.GamePanel.DEFAULT_WIDTH, main.view.gamepanel.GamePanel.DEFAULT_HEIGHT),
                  board_size=(board.Board.DEFAULT_WIDTH, board.Board.DEFAULT_HEIGHT)):
         self.canvas_width = canvas_size[0]
         self.canvas_height = canvas_size[1]
Index: src/main/view/gameplay.py
===================================================================
--- src/main/view/gameplay.py	(revision 60)
+++ src/main/view/gameplay.py	(working copy)
@@ -1,56 +0,0 @@
-'''
-Created on 2011-11-20
-
-@author: Gooble
-'''
-from tkinter import Tk
-import main.game.board as board
-import main.view.slotting
-import main.view.menufactory as menufactory
-import main.view.boardcanvasfactory as boardcanvasfactory
-import main.ai.easyai as easyai
-
-class GamePlay(object):
-
-    DEFAULT_HEIGHT = 480
-    DEFAULT_WIDTH = 480
-
-    def __init__(self, canvas_factory=boardcanvasfactory.BoardCanvasFactory(), menu_factory=menufactory.MenuFactory(), ai=None):
-        self.board = board.Board()
-        
-        self.root = Tk()
-        menu_factory.make_menu(self)
-        
-        self.slotting = main.view.slotting.Slotting(self.board)
-        self.canvas = canvas_factory.make_canvas(self.root, self.board, self.slotting)
-        self._add_bindings_for_canvas()
-        self.ai = ai
-
-    def _add_bindings_for_canvas(self):
-        self.canvas.bind(sequence='<ButtonPress-1>', func=self.draw_slotting)
-        self.canvas.bind(sequence='<Button1-Motion>', func=self.canvas.draw)
-        self.canvas.bind(sequence='<ButtonRelease-1>', func=self.draw_release)
-        
-    def draw_slotting(self, event):
-        self.slotting.select_piece(event)
-        self.canvas.draw(event)
-        
-    def draw_release(self, event):
-        self.slotting.release_piece(event)
-        self.canvas.draw(event)
-        self.check_and_use_ai()
-            
-    def check_and_use_ai(self):
-        if self.ai is not None and self.board.current_turn.is_computers_turn(self.ai):
-            self.ai.make_move(self.board)
-            self.canvas.draw()
-        
-    def start(self):
-        self.root.mainloop()
-        self.check_and_use_ai()
-        
-    def new_game(self):
-        self.board = board.Board()
-        
-if __name__ == '__main__':
-    GamePlay(ai=easyai.EasyAI()).start()
\ No newline at end of file
Index: src/main/view/slotting.py
===================================================================
--- src/main/view/slotting.py	(revision 52)
+++ src/main/view/slotting.py	(working copy)
@@ -7,8 +7,8 @@
 
 class Slotting(object):
     
-    def __init__(self, board):
-        self.board = board
+    def __init__(self, game):
+        self.game = game
         self.start_row = None
         self.start_col = None
         
@@ -17,9 +17,9 @@
 
     def release_piece(self, event):
         to_row, to_col =  main.view.boardcoordinate.BoardCoordinate().get_from(event.x, event.y)
-        self.board.move_piece((self.start_row, self.start_col), (to_row, to_col))
+        self.game.move_piece((self.start_row, self.start_col), (to_row, to_col))
         
-        if self.board.get_piece(self.start_row, self.start_col) is not None:
+        if self.game.get_piece(self.start_row, self.start_col) is not None:
             self.start_row = None
             self.start_col = None
         
Index: src/test/turntest.py
===================================================================
--- src/test/turntest.py	(revision 53)
+++ src/test/turntest.py	(working copy)
@@ -31,19 +31,19 @@
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(3, 4, origin.BOTTOM)
         self.tboard.place_piece(5, 2, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 2, 3)
+        calc = Movement(self.tboard.game.board, 2, 3)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(2, 3), (4, 1), (6, 3)]), moves[0])
         self.assertEqual(as_move_list([(2, 3), (4, 5)]), moves[1])
         
-        self.tboard.board.move_piece((2, 3), (4, 1))
-        self.assertIsNone(self.tboard.board.get_piece(2, 3))
-        self.assertIsNotNone(self.tboard.board.get_piece(4, 1))
+        self.tboard.game.move_piece((2, 3), (4, 1))
+        self.assertIsNone(self.tboard.game.get_piece(2, 3))
+        self.assertIsNotNone(self.tboard.game.get_piece(4, 1))
         
-        self.tboard.board.move_piece((3, 2), (2, 1))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 2))
-        self.assertIsNone(self.tboard.board.get_piece(2, 1))
+        self.tboard.game.move_piece((3, 2), (2, 1))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 2))
+        self.assertIsNone(self.tboard.game.get_piece(2, 1))
         
     def test_cannot_move_a_new_piece_while_move_in_progress_even_if_on_same_side(self):
         # # # # # # # # # #
@@ -61,26 +61,26 @@
         self.tboard.place_piece(3, 3, origin.TOP)
         self.tboard.place_piece(4, 2, origin.BOTTOM)
         self.tboard.place_piece(6, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 4, 2)
+        calc = Movement(self.tboard.game.board, 4, 2)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(4, 2), (3, 1)]), moves[0])
         self.assertEqual(as_move_list([(4, 2), (2, 4), (0, 6)]), moves[1])
-        self.tboard.board.current_turn = Turn(self.tboard.board, origin.TOP)
+        self.tboard.game.current_turn = Turn(self.tboard.game.board, origin.TOP)
         # start move
-        self.tboard.board.move_piece((4, 2), (2, 4))
-        self.assertIsNone(self.tboard.board.get_piece(4, 2))
-        self.assertIsNotNone(self.tboard.board.get_piece(2, 4))
+        self.tboard.game.move_piece((4, 2), (2, 4))
+        self.assertIsNone(self.tboard.game.get_piece(4, 2))
+        self.assertIsNotNone(self.tboard.game.get_piece(2, 4))
         
         # make sure can't move another piece of same type
-        calc = Movement(self.tboard.board, 6, 4)
+        calc = Movement(self.tboard.game.board, 6, 4)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves)) 
         self.assertEqual(as_move_list([(6, 4), (5, 3)]), moves[0])
         self.assertEqual(as_move_list([(6, 4), (5, 5)]), moves[1])
-        self.tboard.board.move_piece((6, 4), (5, 5))
-        self.assertIsNone(self.tboard.board.get_piece(5, 5))
-        self.assertIsNotNone(self.tboard.board.get_piece(6, 4))
+        self.tboard.game.move_piece((6, 4), (5, 5))
+        self.assertIsNone(self.tboard.game.get_piece(5, 5))
+        self.assertIsNotNone(self.tboard.game.get_piece(6, 4))
         
     def test_once_move_completed_jumped_pieces_eaten(self):
         # # # # # # # # # #
@@ -99,20 +99,20 @@
         self.tboard.place_piece(3, 3, origin.TOP)
         self.tboard.place_piece(4, 2, origin.BOTTOM)
         self.tboard.place_piece(6, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 4, 2)
+        calc = Movement(self.tboard.game.board, 4, 2)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(4, 2), (2, 0)]), moves[0])
         self.assertEqual(as_move_list([(4, 2), (2, 4), (0, 6)]), moves[1])
-        self.tboard.board.current_turn = Turn(self.tboard.board, origin.TOP)
-        self.tboard.board.move_piece((4, 2), (2, 4))
-        self.tboard.board.move_piece((2, 4), (0, 6))
+        self.tboard.game.current_turn = Turn(self.tboard.game.board, origin.TOP)
+        self.tboard.game.move_piece((4, 2), (2, 4))
+        self.tboard.game.move_piece((2, 4), (0, 6))
         
-        self.assertIsNone(self.tboard.board.get_piece(4, 2))
-        self.assertIsNone(self.tboard.board.get_piece(3, 3))
-        self.assertIsNone(self.tboard.board.get_piece(2, 4))
-        self.assertIsNone(self.tboard.board.get_piece(1, 5))
-        self.assertIsNotNone(self.tboard.board.get_piece(0, 6))
+        self.assertIsNone(self.tboard.game.get_piece(4, 2))
+        self.assertIsNone(self.tboard.game.get_piece(3, 3))
+        self.assertIsNone(self.tboard.game.get_piece(2, 4))
+        self.assertIsNone(self.tboard.game.get_piece(1, 5))
+        self.assertIsNotNone(self.tboard.game.get_piece(0, 6))
         
     def test_can_move_opponent_piece_only_once_move_complete(self):
         # # # # # # # # # #
@@ -131,18 +131,18 @@
         self.tboard.place_piece(3, 3, origin.TOP)
         self.tboard.place_piece(4, 2, origin.BOTTOM)
         self.tboard.place_piece(4, 4, origin.BOTTOM)
-        self.tboard.board.current_turn = Turn(self.tboard.board, origin.TOP)
-        self.tboard.board.move_piece((4, 2), (2, 4))
-        self.assertIsNone(self.tboard.board.get_piece(4, 2))
-        self.tboard.board.move_piece((2, 4), (0, 6))
+        self.tboard.game.current_turn = Turn(self.tboard.game.board, origin.TOP)
+        self.tboard.game.move_piece((4, 2), (2, 4))
+        self.assertIsNone(self.tboard.game.get_piece(4, 2))
+        self.tboard.game.move_piece((2, 4), (0, 6))
         
-        self.tboard.board.move_piece((4, 4), (3, 5))
-        self.assertIsNotNone(self.tboard.board.get_piece(4, 4))
-        self.assertIsNone(self.tboard.board.get_piece(3, 5))
+        self.tboard.game.move_piece((4, 4), (3, 5))
+        self.assertIsNotNone(self.tboard.game.get_piece(4, 4))
+        self.assertIsNone(self.tboard.game.get_piece(3, 5))
         
-        self.tboard.board.move_piece((3, 1), (4, 2))
-        self.assertIsNone(self.tboard.board.get_piece(3, 1))
-        self.assertIsNotNone(self.tboard.board.get_piece(4, 2))
+        self.tboard.game.move_piece((3, 1), (4, 2))
+        self.assertIsNone(self.tboard.game.get_piece(3, 1))
+        self.assertIsNotNone(self.tboard.game.get_piece(4, 2))
         
     def test_move_list_mid_jump_contains_only_further_jumps_or_backwards_movement(self):
         # # # # # # # # # #
@@ -171,16 +171,16 @@
         #Similarly with backward movement. It won't show up, but you CAN do it because
         #The filtering will occur IN THE TURN.
         
-        self.tboard.board.move_piece((3, 3), (5, 1))
-        moves = Movement(self.tboard.board, 5, 1).get_available_moves()
+        self.tboard.game.move_piece((3, 3), (5, 1))
+        moves = Movement(self.tboard.game.board, 5, 1).get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(5, 1), (6, 0)]), moves[0])
         self.assertEqual(as_move_list([(5, 1), (7, 3)]), moves[1])
         
         #Now try moving to 6, 0 - it won't work.
-        self.tboard.board.move_piece((5, 1), (6, 0))
-        self.assertIsNone(self.tboard.board.get_piece(6, 0))
-        self.assertIsNotNone(self.tboard.board.get_piece(5, 1))
+        self.tboard.game.move_piece((5, 1), (6, 0))
+        self.assertIsNone(self.tboard.game.get_piece(6, 0))
+        self.assertIsNotNone(self.tboard.game.get_piece(5, 1))
         
     def test_move_backwards_within_turn_and_then_keep_going(self):
         # # # # # # # # # #
@@ -199,19 +199,19 @@
         self.tboard.place_piece(4, 2, origin.BOTTOM)
         self.tboard.place_piece(6, 2, origin.BOTTOM)
         
-        self.tboard.board.move_piece((3, 3), (5, 1))
-        moves = Movement(self.tboard.board, 5, 1).get_available_moves()
+        self.tboard.game.move_piece((3, 3), (5, 1))
+        moves = Movement(self.tboard.game.board, 5, 1).get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(5, 1), (6, 0)]), moves[0])
         self.assertEqual(as_move_list([(5, 1), (7, 3)]), moves[1])
         
-        self.tboard.board.move_piece((5, 1), (3, 3))
-        self.assertIsNone(self.tboard.board.get_piece(5, 1))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 3))
+        self.tboard.game.move_piece((5, 1), (3, 3))
+        self.assertIsNone(self.tboard.game.get_piece(5, 1))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 3))
         
-        self.tboard.board.move_piece((3, 3), (5, 1))
-        self.assertIsNone(self.tboard.board.get_piece(3, 3))
-        self.assertIsNotNone(self.tboard.board.get_piece(5, 1))
+        self.tboard.game.move_piece((3, 3), (5, 1))
+        self.assertIsNone(self.tboard.game.get_piece(3, 3))
+        self.assertIsNotNone(self.tboard.game.get_piece(5, 1))
         
 
 if __name__ == "__main__":
Index: src/test/ai/aitest.py
===================================================================
--- src/test/ai/aitest.py	(revision 56)
+++ src/test/ai/aitest.py	(working copy)
@@ -14,8 +14,8 @@
 class AITest(unittest.TestCase):
 
     def test_if_it_is_bottoms_turn_then_ai_auto_moves_piece_on_board(self):
-        self.game = main.view.gameplay.GamePlay(ai=easyai.EasyAI())
-        self.tboard = TestBoard(self.game.board)
+        self.gamepanel = main.view.gamepanel.GamePanel(ai=easyai.EasyAI())
+        self.tboard = TestBoard(self.gamepanel.game)
         # # # # # # # # # #
         #  0 1 2 3 4 5 6 7#
         #0 _ _ _ _ _ _ _ _#
@@ -35,21 +35,21 @@
         self.move_piece(3, 2, 5, 4)
         self.move_piece(5, 4, 7, 6)
         
-        self.assertTrue(self.tboard.board.get_piece(7, 6).is_king())
-        self.assertTrue(self.tboard.board.get_piece(7, 6).is_king())
-        self.assertIsNone(self.tboard.board.get_piece(4, 3))
-        self.assertIsNone(self.tboard.board.get_piece(6, 5))
+        self.assertTrue(self.tboard.game.get_piece(7, 6).is_king())
+        self.assertTrue(self.tboard.game.get_piece(7, 6).is_king())
+        self.assertIsNone(self.tboard.game.get_piece(4, 3))
+        self.assertIsNone(self.tboard.game.get_piece(6, 5))
         
-        self.game.check_and_use_ai()
+        self.gamepanel.check_and_use_ai()
         # AI moved piece
-        self.assertIsNone(self.tboard.board.get_piece(4, 0))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 1))
+        self.assertIsNone(self.tboard.game.get_piece(4, 0))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 1))
 
     def move_piece(self, from_row, from_col, to_row, to_col):
-        self.game.slotting.select_piece(MockEvent(from_col * (main.view.gameplay.GamePlay.DEFAULT_WIDTH / main.game.board.Board.DEFAULT_WIDTH),
-                                                  from_row * (main.view.gameplay.GamePlay.DEFAULT_HEIGHT / main.game.board.Board.DEFAULT_HEIGHT)))
-        self.game.slotting.release_piece(MockEvent(to_col * (main.view.gameplay.GamePlay.DEFAULT_WIDTH / main.game.board.Board.DEFAULT_WIDTH),
-                                                   to_row * (main.view.gameplay.GamePlay.DEFAULT_HEIGHT / main.game.board.Board.DEFAULT_HEIGHT)))
+        self.gamepanel.slotting.select_piece(MockEvent(from_col * (main.view.gamepanel.GamePanel.DEFAULT_WIDTH / main.game.board.Board.DEFAULT_WIDTH),
+                                                  from_row * (main.view.gamepanel.GamePanel.DEFAULT_HEIGHT / main.game.board.Board.DEFAULT_HEIGHT)))
+        self.gamepanel.slotting.release_piece(MockEvent(to_col * (main.view.gamepanel.GamePanel.DEFAULT_WIDTH / main.game.board.Board.DEFAULT_WIDTH),
+                                                   to_row * (main.view.gamepanel.GamePanel.DEFAULT_HEIGHT / main.game.board.Board.DEFAULT_HEIGHT)))
 
 if __name__ == "__main__":
     unittest.main()
\ No newline at end of file
Index: src/test/ai/aimatchtest.py
===================================================================
--- src/test/ai/aimatchtest.py	(revision 65)
+++ src/test/ai/aimatchtest.py	(working copy)
@@ -4,22 +4,22 @@
 @author: Gooble
 '''
 import unittest
-import main.game.board
 from main.ai.easyai import EasyAI
 from main.game import origin
 from main.view.display import BoardDisplay
 from main.ai.randomai import RandomAI
 from main.ai.match import Match
+import main.game.gameplay
 
 class AIMatchTest(unittest.TestCase):
 
+    @unittest.skip
     def test_two_ais_face_off_eventually_it_is_gameover(self):
-        self.board = main.game.board.Board()
-        Match(board=self.board, ai_top=RandomAI(origin.TOP), ai_bottom=EasyAI(origin.BOTTOM)).go()
-        self.assertTrue(self.board.is_game_over())
-        BoardDisplay(self.board).print_board()
+        self.game = main.game.gameplay.GamePlay()
+        Match(game=self.game, ai_top=RandomAI(origin.TOP), ai_bottom=EasyAI(origin.BOTTOM)).go()
+        self.assertTrue(self.game.is_game_over())
+        BoardDisplay(self.game.board).print_board()
 
 
 if __name__ == "__main__":
-    #import sys;sys.argv = ['', 'Test.test_two_ais_face_off_eventually_it_is_gameover']
     unittest.main()
\ No newline at end of file
Index: src/test/ai/originmovestest.py
===================================================================
--- src/test/ai/originmovestest.py	(revision 57)
+++ src/test/ai/originmovestest.py	(working copy)
@@ -29,7 +29,7 @@
         self.tboard.place_piece(4, 0, origin.BOTTOM)
         self.tboard.place_piece(4, 3, origin.BOTTOM)
         self.tboard.place_piece(6, 5, origin.BOTTOM)
-        allmoves = OriginMoves(self.tboard.board, origin.BOTTOM).get_moves()
+        allmoves = OriginMoves(self.tboard.game.board, origin.BOTTOM).get_moves()
         
         self.assertEqual(3, len(allmoves))
         self.assertEqual(1, len(allmoves[0]))
@@ -59,7 +59,7 @@
         self.tboard.place_piece(6, 5, origin.BOTTOM)
         self.tboard.place_piece(7, 4, origin.BOTTOM)
         
-        allmoves = OriginMoves(self.tboard.board,origin.BOTTOM).get_moves()
+        allmoves = OriginMoves(self.tboard.game.board,origin.BOTTOM).get_moves()
         self.assertEqual(2, len(allmoves))
 
         self.assertEqual(2, len(allmoves[0]))
Index: src/test/kingtest.py
===================================================================
--- src/test/kingtest.py	(revision 40)
+++ src/test/kingtest.py	(working copy)
@@ -27,12 +27,12 @@
         self.tboard.place_piece(5, 3, origin.TOP)
         self.tboard.place_piece(6, 2, origin.BOTTOM)
 
-        self.tboard.board.move_piece((5, 3), (7, 1))
-        self.assertIsNone(self.tboard.board.get_piece(5, 3))
-        self.assertIsNone(self.tboard.board.get_piece(6, 2))
-        self.assertIsNotNone(self.tboard.board.get_piece(7, 1))
+        self.tboard.game.move_piece((5, 3), (7, 1))
+        self.assertIsNone(self.tboard.game.get_piece(5, 3))
+        self.assertIsNone(self.tboard.game.get_piece(6, 2))
+        self.assertIsNotNone(self.tboard.game.get_piece(7, 1))
         
-        self.assertTrue(self.tboard.board.get_piece(7, 1).is_king())
+        self.assertTrue(self.tboard.game.get_piece(7, 1).is_king())
 
 
 if __name__ == "__main__":
Index: src/test/view/slottingtest.py
===================================================================
--- src/test/view/slottingtest.py	(revision 54)
+++ src/test/view/slottingtest.py	(working copy)
@@ -4,10 +4,10 @@
 @author: Gooble
 '''
 from main.game import origin
-from main.game.board import Board
 from test.util.testboard import TestBoard
 import main.view.slotting as slotting
 import unittest
+from main.game.gameplay import GamePlay
 
 class MockEvent(object):
     
@@ -19,28 +19,28 @@
 
     def setUp(self):
         self.tboard = TestBoard()
-        self.board = Board()
-        self.slotting = slotting.Slotting(self.board)
+        self.game = GamePlay()
+        self.slotting = slotting.Slotting(self.game)
 
     def test_piece_gets_selected_and_slotted_when_slot_is_valid_move_and_when_move_is_complete_turn_is_ended(self):
-        self.assertIsNone(self.board.current_turn.piece)
+        self.assertIsNone(self.game.current_turn.piece)
         self.slotting.select_piece(MockEvent(120, 120))
         self.assertEqual(2, self.slotting.start_row)
         self.assertEqual(2, self.slotting.start_col)
         self.slotting.release_piece(MockEvent(100, 200))
-        self.assertIsNone(self.board.get_piece(2, 2))
-        self.assertIsNotNone(self.board.get_piece(3, 1))
-        self.assertIsNone(self.board.current_turn.piece)
+        self.assertIsNone(self.game.get_piece(2, 2))
+        self.assertIsNotNone(self.game.get_piece(3, 1))
+        self.assertIsNone(self.game.current_turn.piece)
         
     def test_piece_does_not_get_placed_in_new_slot_when_invalid_move_and_start_row_and_col_reset(self):
         self.slotting.select_piece(MockEvent(100, 100))
         self.assertEqual(1, self.slotting.start_row)
         self.assertEqual(1, self.slotting.start_col)
         self.slotting.release_piece(MockEvent(300, 300))
-        self.assertIsNotNone(self.board.get_piece(1, 1))
-        self.assertIsNotNone(self.board.get_piece(2, 2))
-        self.assertIsNone(self.board.get_piece(3, 1))
-        self.assertIsNone(self.board.get_piece(4, 4))
+        self.assertIsNotNone(self.game.get_piece(1, 1))
+        self.assertIsNotNone(self.game.get_piece(2, 2))
+        self.assertIsNone(self.game.get_piece(3, 1))
+        self.assertIsNone(self.game.get_piece(4, 4))
         self.assertIsNone(self.slotting.start_row)
         self.assertIsNone(self.slotting.start_col)
         
@@ -59,8 +59,8 @@
         self.tboard.place_piece(2, 1, origin.TOP)
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(5, 4, origin.BOTTOM)
-        self.slotting = slotting.Slotting(self.tboard.board)
-        self.board = self.tboard.board
+        self.slotting = slotting.Slotting(self.tboard.game)
+        self.board = self.tboard.game
         
         self.slotting.select_piece(MockEvent(100, 140))
         self.assertEqual(2, self.slotting.start_row)
Index: src/test/movement/movementcasestest.py
===================================================================
--- src/test/movement/movementcasestest.py	(revision 50)
+++ src/test/movement/movementcasestest.py	(working copy)
@@ -17,7 +17,7 @@
     def test_get_avail_moves_with_opponent_piece_returns_jumped_position(self):
         self.tboard.place_piece(1, 5, origin.TOP)
         self.tboard.place_piece(2, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 1, 5)
+        calc = Movement(self.tboard.game.board, 1, 5)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(1, 5), (3, 3)]), moves[0])
@@ -40,7 +40,7 @@
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(3, 4, origin.BOTTOM)
         self.tboard.place_piece(5, 2, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 2, 3)
+        calc = Movement(self.tboard.game.board, 2, 3)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(2, 3), (4, 1), (6, 3)]), moves[0])
@@ -64,7 +64,7 @@
         self.tboard.place_piece(4, 5, origin.BOTTOM)
         self.tboard.place_piece(5, 2, origin.BOTTOM)
         self.tboard.place_piece(7, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 2, 3)
+        calc = Movement(self.tboard.game.board, 2, 3)
         moves = calc.get_available_moves()
         self.assertEqual(1, len(moves))
         self.assertEqual(as_move_list([(2, 3), (4, 1), (6, 3)]), moves[0])
@@ -88,7 +88,7 @@
         self.tboard.place_piece(5, 6, origin.BOTTOM)
         self.tboard.place_piece(6, 3, origin.BOTTOM)
         self.tboard.place_piece(6, 7, origin.TOP)
-        calc = Movement(self.tboard.board, 2, 3)
+        calc = Movement(self.tboard.game.board, 2, 3)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(2, 3), (4, 1)]), moves[0])
@@ -110,7 +110,7 @@
         self.tboard.place_piece(1, 2, origin.BOTTOM)
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(5, 2, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 0, 3)
+        calc = Movement(self.tboard.game.board, 0, 3)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(0, 3), (2, 1), (4, 3), (6, 1)]), moves[0])
@@ -133,7 +133,7 @@
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(5, 2, origin.BOTTOM)
         self.tboard.place_piece(5, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 0, 3)
+        calc = Movement(self.tboard.game.board, 0, 3)
         moves = calc.get_available_moves()
         self.assertEqual(3, len(moves))
         self.assertEqual(as_move_list([(0, 3), (2, 1), (4, 3), (6, 1)]), moves[0])
@@ -155,7 +155,7 @@
         self.tboard.place_piece(3, 2, origin.TOP)
         self.tboard.place_piece(4, 1, origin.TOP)
         self.tboard.place_piece(4, 3, origin.TOP)
-        calc = Movement(self.tboard.board, 3, 2)
+        calc = Movement(self.tboard.game.board, 3, 2)
         moves = calc.get_available_moves()
         self.assertEqual(0, len(moves))
         
@@ -175,7 +175,7 @@
         self.tboard.place_piece(4, 1, origin.TOP)
         self.tboard.place_piece(4, 3, origin.BOTTOM)
         self.tboard.place_piece(6, 5, origin.TOP)
-        calc = Movement(self.tboard.board, 3, 2)
+        calc = Movement(self.tboard.game.board, 3, 2)
         moves = calc.get_available_moves()
         self.assertEqual(1, len(moves))
         self.assertEqual(as_move_list([(3, 2), (5, 4)]), moves[0])
@@ -197,28 +197,28 @@
         self.tboard.place_piece(2, 2, origin.BOTTOM)
         self.tboard.place_piece(4, 2, origin.BOTTOM)
         self.tboard.place_piece(6, 4, origin.BOTTOM)
-        moves = Movement(self.tboard.board, 1, 3).get_available_moves()
+        moves = Movement(self.tboard.game.board, 1, 3).get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(1, 3), (3, 1), (5, 3), (7, 5)]), moves[0])
         self.assertEqual(as_move_list([(1, 3), (2, 4)]), moves[1])
         
-        self.tboard.board.move_piece((1, 3), (3, 1))
-        self.assertIsNone(self.tboard.board.get_piece(1, 3))
-        self.assertIsNotNone(self.tboard.board.get_piece(2, 2))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 1))
+        self.tboard.game.move_piece((1, 3), (3, 1))
+        self.assertIsNone(self.tboard.game.get_piece(1, 3))
+        self.assertIsNotNone(self.tboard.game.get_piece(2, 2))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 1))
         
-        moves = Movement(self.tboard.board, 3, 1).get_available_moves()
+        moves = Movement(self.tboard.game.board, 3, 1).get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(3, 1), (4, 0)]), moves[0])
         self.assertEqual(as_move_list([(3, 1), (5, 3), (7, 5)]), moves[1])
         
         # move backward just to trip things up
-        self.tboard.board.move_piece((3, 1), (1, 3))
-        self.assertIsNone(self.tboard.board.get_piece(3, 1))
-        self.assertIsNotNone(self.tboard.board.get_piece(2, 2))
-        self.assertIsNotNone(self.tboard.board.get_piece(1, 3))
+        self.tboard.game.move_piece((3, 1), (1, 3))
+        self.assertIsNone(self.tboard.game.get_piece(3, 1))
+        self.assertIsNotNone(self.tboard.game.get_piece(2, 2))
+        self.assertIsNotNone(self.tboard.game.get_piece(1, 3))
         
-        moves = Movement(self.tboard.board, 1, 3).get_available_moves()
+        moves = Movement(self.tboard.game.board, 1, 3).get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(1, 3), (3, 1), (5, 3), (7, 5)]), moves[0])
         ### bug-- it's 1,3 instead of 2,4 because 2,4 is gone- it's gone because
@@ -250,17 +250,17 @@
         # # # # # # # # # #
         self.tboard.place_piece(2, 1, origin.TOP)
         self.tboard.place_piece(4, 3, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 2, 1)
+        calc = Movement(self.tboard.game.board, 2, 1)
         moves = calc.get_available_moves()
         self.assertEqual(as_move_list([(2, 1), (3, 0)]), moves[0])
         self.assertEqual(as_move_list([(2, 1), (3, 2)]), moves[1])
         
-        self.tboard.board.move_piece((2, 1), (3, 2))
-        self.assertIsNone(self.tboard.board.current_turn.piece)
-        self.tboard.board.move_piece((3, 2), (5, 4))
-        self.assertIsNone(self.tboard.board.get_piece(5, 4))
-        self.assertIsNotNone(self.tboard.board.get_piece(4, 3))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 2))
+        self.tboard.game.move_piece((2, 1), (3, 2))
+        self.assertIsNone(self.tboard.game.current_turn.piece)
+        self.tboard.game.move_piece((3, 2), (5, 4))
+        self.assertIsNone(self.tboard.game.get_piece(5, 4))
+        self.assertIsNotNone(self.tboard.game.get_piece(4, 3))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 2))
         
 
 if __name__ == "__main__":
Index: src/test/movement/kingmovementtest.py
===================================================================
--- src/test/movement/kingmovementtest.py	(revision 40)
+++ src/test/movement/kingmovementtest.py	(working copy)
@@ -28,7 +28,7 @@
         # # # # # # # # # #
         self.tboard.place_king(3, 2, origin.BOTTOM)
         self.tboard.place_piece(4, 3, origin.TOP)
-        calc = Movement(self.tboard.board, 3, 2)
+        calc = Movement(self.tboard.game.board, 3, 2)
         moves = calc.get_available_moves()
         self.assertEqual(4, len(moves))
         self.assertEqual(as_move_list([(3, 2), (4, 1)]), moves[0])
@@ -53,7 +53,7 @@
         self.tboard.place_king(3, 2, origin.BOTTOM)
         self.tboard.place_piece(4, 5, origin.TOP)
         self.tboard.place_king(6, 5, origin.TOP)
-        calc = Movement(self.tboard.board, 3, 2)
+        calc = Movement(self.tboard.game.board, 3, 2)
         moves = calc.get_available_moves()
         self.assertEqual(4, len(moves))
         self.assertEqual(as_move_list([(3, 2), (4, 1)]), moves[0])
@@ -78,7 +78,7 @@
         self.tboard.place_king(3, 2, origin.TOP)
         self.tboard.place_piece(4, 1, origin.TOP)
         self.tboard.place_king(4, 3, origin.TOP)
-        calc = Movement(self.tboard.board, 3, 2)
+        calc = Movement(self.tboard.game.board, 3, 2)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(3, 2), (2, 1)]), moves[0])
@@ -97,7 +97,7 @@
         #7 _ _ _ t _ _ _ _#
         # # # # # # # # # #
         self.tboard.place_king(7, 3, origin.TOP)
-        calc = Movement(self.tboard.board, 7, 3)
+        calc = Movement(self.tboard.game.board, 7, 3)
         moves = calc.get_available_moves()
         self.assertEqual(2, len(moves))
         self.assertEqual(as_move_list([(7, 3), (6, 2)]), moves[0])
@@ -118,7 +118,7 @@
         self.tboard.place_king(2, 1, origin.TOP)
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(3, 4, origin.BOTTOM)
-        calc = Movement(self.tboard.board, 2, 1)
+        calc = Movement(self.tboard.game.board, 2, 1)
         moves = calc.get_available_moves()
         self.assertEqual(4, len(moves))
         self.assertEqual(as_move_list([(2, 1), (1, 0)]), moves[0])
@@ -126,17 +126,17 @@
         self.assertEqual(as_move_list([(2, 1), (3, 0)]), moves[2])
         self.assertEqual(as_move_list([(2, 1), (4, 3), (2, 5)]), moves[3])
         
-        self.tboard.board.move_piece((2, 1), (4, 3))
-        self.assertIsNone(self.tboard.board.get_piece(2, 1))
-        self.assertIsNotNone(self.tboard.board.get_piece(3, 2))
-        self.assertIsNotNone(self.tboard.board.get_piece(4, 3))
+        self.tboard.game.move_piece((2, 1), (4, 3))
+        self.assertIsNone(self.tboard.game.get_piece(2, 1))
+        self.assertIsNotNone(self.tboard.game.get_piece(3, 2))
+        self.assertIsNotNone(self.tboard.game.get_piece(4, 3))
         
-        self.assertTrue(self.tboard.board.get_piece(4, 3).is_king())
+        self.assertTrue(self.tboard.game.get_piece(4, 3).is_king())
         
-        self.tboard.board.move_piece((4, 3), (2, 5))
-        self.assertIsNone(self.tboard.board.get_piece(3, 2))
-        self.assertIsNone(self.tboard.board.get_piece(3, 4))
-        self.assertIsNotNone(self.tboard.board.get_piece(2, 5))
+        self.tboard.game.move_piece((4, 3), (2, 5))
+        self.assertIsNone(self.tboard.game.get_piece(3, 2))
+        self.assertIsNone(self.tboard.game.get_piece(3, 4))
+        self.assertIsNotNone(self.tboard.game.get_piece(2, 5))
 
 
 if __name__ == "__main__":
Index: src/test/boardtest.py
===================================================================
--- src/test/boardtest.py	(revision 62)
+++ src/test/boardtest.py	(working copy)
@@ -7,11 +7,12 @@
 from main.game.board import Board
 from test.util.testboard import TestBoard
 import unittest
+from main.game.gameplay import GamePlay
 
 class BoardTest(unittest.TestCase):
     
     def setUp(self):
-        self.board = Board()
+        self.game = GamePlay()
         self.tboard = TestBoard()
 
     def test_board_initial_configuration_correct(self):
@@ -19,7 +20,7 @@
             [self.check_piece(row, col) for row in range(0, Board.DEFAULT_HEIGHT)]
                 
     def check_piece(self, row, col):
-        piece = self.board.get_piece(row, col)
+        piece = self.game.board.get_piece(row, col)
         if row < 3 and (row + col) % 2 == 0:
             self.assertIsNotNone(piece)
             self.assertTrue(piece.is_from_top())
@@ -31,9 +32,9 @@
             
     def test_move_piece_to_invalid_location_does_nothing(self):
         original_board = Board()
-        self.board.move_piece((2, 2), (5, 6))
+        self.game.move_piece((2, 2), (5, 6))
         for row in range (0, Board.DEFAULT_HEIGHT):
-            [self.check_pieces_equal(self.board.get_piece(row, col), original_board.get_piece(row, col)) for col in range(0, Board.DEFAULT_WIDTH)]
+            [self.check_pieces_equal(self.game.board.get_piece(row, col), original_board.get_piece(row, col)) for col in range(0, Board.DEFAULT_WIDTH)]
             
     def check_pieces_equal(self, piece1, piece2):
         if piece1 is None or piece2 is None:
@@ -44,11 +45,12 @@
         self.assertEqual(piece1.get_origin(), piece2.get_origin())
         
     def test_move_piece_to_valid_location_only_works_if_location_is_in_move_list(self):
-        self.assertIsNone(self.board.get_piece(3, 1))
-        self.board.move_piece((2, 0), (3, 1))
-        self.assertIsNone(self.board.get_piece(2, 0))
-        self.assertIsNotNone(self.board.get_piece(3, 1))
-        self.assertTrue(self.board.get_piece(3, 1).is_from_top())
+        self.assertIsNone(self.game.board.get_piece(3, 1))
+        self.game.move_piece((2, 0), (3, 1))
+        self.assertIsNone(self.game.board.get_piece(2, 0))
+        self.assertIsNotNone(self.game.board.get_piece(3, 1))
+        self.assertTrue(self.game.board.get_piece(3, 1).is_from_top())
+        self.assertFalse(self.game.is_game_over())
         
     def test_game_over_when_one_type_of_piece_runs_out_simple_board(self):
         # # # # # # # # # #
@@ -65,23 +67,23 @@
         self.tboard.place_king(2, 1, origin.TOP)
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         
-        self.assertFalse(self.tboard.board.is_game_over())
-        self.tboard.board.move_piece((2, 1), (4, 3))
-        self.assertTrue(self.tboard.board.is_game_over())
+        self.assertFalse(self.tboard.game.is_game_over())
+        self.tboard.game.move_piece((2, 1), (4, 3))
+        self.assertTrue(self.tboard.game.is_game_over())
         
         self._check_board_empty_except([(4, 3)])
-        self.assertTrue(self.tboard.board.is_game_over())
-        self.assertEqual(1, self.tboard.board.state.num_top_pieces)
-        self.assertEqual(0, self.tboard.board.state.num_bottom_pieces)
+        self.assertTrue(self.tboard.game.is_game_over())
+        self.assertEqual(1, self.tboard.game.state.num_top_pieces)
+        self.assertEqual(0, self.tboard.game.state.num_bottom_pieces)
         
     def _check_board_empty_except(self, list_of_exceptions):
         for row in range(0, Board.DEFAULT_HEIGHT):
             for col in range (0, Board.DEFAULT_WIDTH):
                 if (row, col) in list_of_exceptions: continue
-                self.assertIsNone(self.tboard.board.get_piece(row, col), "There is a piece at " + str(row) + ", " + str(col))
+                self.assertIsNone(self.tboard.game.get_piece(row, col), "There is a piece at " + str(row) + ", " + str(col))
                 
         for loc in list_of_exceptions:
-            self.assertIsNotNone(self.tboard.board.get_piece(loc[0], loc[1]), "There is NO piece at " + str(row) + ", " + str(col))
+            self.assertIsNotNone(self.tboard.game.get_piece(loc[0], loc[1]), "There is NO piece at " + str(row) + ", " + str(col))
         
     def test_game_over_when_one_type_of_piece_runs_out_less_simple_board(self):
         # # # # # # # # # #
@@ -99,18 +101,18 @@
         self.tboard.place_piece(3, 2, origin.BOTTOM)
         self.tboard.place_piece(4, 5, origin.BOTTOM)
         
-        self.assertFalse(self.tboard.board.is_game_over())
+        self.assertFalse(self.tboard.game.is_game_over())
         
-        ## The counts work because when you move a piece, you're removing it from the board.
-        ## And when you put it back somewhere else, you're incrementing once more.
+        ## The counts work because when you move a piece, you're removing it from the board.--
+        ## And when you put it back somewhere else, you're incrementing once more.++
         
-        self.tboard.board.move_piece((2, 1), (4, 3))
+        self.tboard.game.move_piece((2, 1), (4, 3))
         self._check_board_configuration(num_top=1, num_bottom=1, non_empty_cells=[(4, 3), (4, 5)])
         
-        self.tboard.board.move_piece((4, 5), (3, 4))
+        self.tboard.game.move_piece((4, 5), (3, 4))
         self._check_board_configuration(num_top=1, num_bottom=1, non_empty_cells=[(4, 3), (3, 4)])
         
-        self.tboard.board.move_piece((4, 3), (2, 5))
+        self.tboard.game.move_piece((4, 3), (2, 5))
         self._check_board_configuration(num_top=1, num_bottom=0, non_empty_cells=[(2, 5)])
         
         
@@ -133,8 +135,8 @@
         self.tboard.place_piece(1, 2, origin.TOP)
         self.tboard.place_piece(2, 1, origin.BOTTOM)
         
-        self.tboard.board.move_piece((0, 5), (1, 4))
-        self.assertEqual(origin.TOP, self.tboard.board.current_turn.origin)
+        self.tboard.game.move_piece((0, 5), (1, 4))
+        self.assertEqual(origin.TOP, self.tboard.game.current_turn.origin)
         
     def test_game_over_if_two_passes_occur_in_a_row(self):
         # # # # # # # # # #
@@ -166,15 +168,15 @@
         self.tboard.place_piece(7, 5, origin.BOTTOM)
         self.tboard.place_piece(7, 7, origin.BOTTOM)
         
-        self.tboard.board.move_piece((2, 2), (3, 1))
-        self.assertTrue(self.tboard.board.is_game_over())
+        self.tboard.game.move_piece((2, 2), (3, 1))
+        self.assertTrue(self.tboard.game.is_game_over())
         
         
     def _check_board_configuration(self, num_top, num_bottom, non_empty_cells):
         self._check_board_empty_except(non_empty_cells)
-        self.assertEqual(num_top, self.tboard.board.state.num_top_pieces)
-        self.assertEqual(num_bottom, self.tboard.board.state.num_bottom_pieces)
-        self.assertEqual(num_top == 0 or num_bottom == 0, self.tboard.board.is_game_over())
+        self.assertEqual(num_top, self.tboard.game.state.num_top_pieces)
+        self.assertEqual(num_bottom, self.tboard.game.state.num_bottom_pieces)
+        self.assertEqual(num_top == 0 or num_bottom == 0, self.tboard.game.is_game_over())
 
 if __name__ == "__main__":
     #import sys;sys.argv = ['', 'Test.testName']
Index: src/test/util/testboard.py
===================================================================
--- src/test/util/testboard.py	(revision 54)
+++ src/test/util/testboard.py	(working copy)
@@ -3,33 +3,28 @@
 
 @author: Gooble
 '''
-from main.game import origin
 from main.game.board import Board
 from main.game.piece import Piece
+from main.game.gameplay import GamePlay
 
 class TestBoard(object):
 
-    def __init__(self, board=None):
-        if board is None:
-            self.board = Board()
+    def __init__(self, game=None):
+        if game is None:
+            self.game = GamePlay()
         else:
-            self.board = board
+            self.game = game
             
         self.clear_board()
         
     def clear_board(self):
-        self.board.state.num_bottom_pieces = 0
-        self.board.state.num_top_pieces = 0
-        self.board.pieces = [[None] * Board.DEFAULT_WIDTH for row in self.board.pieces]
+        self.game.state.num_bottom_pieces = 0
+        self.game.state.num_top_pieces = 0
+        self.game.board.pieces = [[None] * Board.DEFAULT_WIDTH for row in self.game.board.pieces]
         
     def place_piece(self, row, col, origin):
-        self.board.set_piece(row, col, Piece(origin))
+        self.game.set_piece(row, col, Piece(origin))
         
     def place_king(self, row, col, origin):
         self.place_piece(row, col, origin);
-        self.board.get_piece(row, col).set_king(True)
-        
-        
-if __name__ == '__main__':
-    board = TestBoard()
-    board.place_piece(3, 5, origin.TOP)
+        self.game.board.get_piece(row, col).set_king(True)
Index: src/test/util/testcase.py
===================================================================
--- src/test/util/testcase.py	(revision 62)
+++ src/test/util/testcase.py	(working copy)
@@ -50,7 +50,7 @@
             for j in range(len(pieces)):
                 move_row, move_col = self.print_piece_code(indent, i, pieces, j)
         
-        print (indent + 'calc = Movement(self.tboard.board, '+str(move_row)+', '+str(move_col)+')')
+        print (indent + 'calc = Movement(self.tboard.game.board, '+str(move_row)+', '+str(move_col)+')')
         print (indent + 'moves = calc.get_available_moves()')
         
         
