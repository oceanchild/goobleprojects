#Sat Apr 28 22:31:02 EDT 2012
cmdhistory=["(run)" "(conj '(\:a \:b) 0)" "(cons 0 '(\:a \:b))" "(run)" "(reduce (fn [a b] (* a b)) [1 2 3 4])" "(reduce (fn [a b] (* a b)) (fn [x] (* x 10)) [1 2 3 4])" "(reduce (fn [a b] (* a b)) (fn [x y] (* x y)) [1 2 3 4])" "(concat (list 5) [1 2 3])" "(interpose \\", \\" [\\"bob\\" \\"paul\\"])" "(apply str '(\\"bob\\" \\", \\" \\"paul\\"))" "(defn eater [x] (\:eater x))" "(eater \\"bob\\")" "(eater \:eater)" "(\:eater 5)" "(\:eater \:eater)" "(\:eater true)" "(fn [x] (\:eater x))" "((fn [x] (\:eater x)) 4)" "((fn [x] (\:eater x)) \:eater)" "(defmulti diet (fn [x] (\:eater x)))\\r\\n(defmethod diet \:herbivore [a] (str a \\" eats veggies.\\"))" "(get \:eater {\:eater \\"bob\\"})" "(get {\:eater \\"bob\\"} \:eater )" "({\:eater \\"bob\\"} \:eater)" "(run)" "(for [index (range 6)] 1)" "(map (fn [index] (* index index))\\r\\n          (range 6))" "(symbol? \:a)" "(complement (symbol? \:a))" "(complement symbol? \:a)" "((complement symbol?) \:a)" "(symbol? 'b)" "(map (fn [x] (+ x 5)) '(1 2 3))" "(symbol? \:a)" "(symbol? 'b)" "(dec 10)" "(not acc)" "(conj 1 [1 2 3])" "(conj [1 2 3] 1)" "(first [1 2 3])" "(rest [1 2 3])" "(count nil)" "(conj [1 2 3] nil)" "(conj [1 2 3] [])" "(list [1  2 3] [])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (> 2 (count coll))\\r\\n      acc\\r\\n      (recur (first coll) (rest coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(count [1 2 3])" "(recursive-reverse '(1 2 3))" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (> 2 (count coll))\\r\\n      acc\\r\\n      (recur (conj (rest coll)) (first coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(\\n  recursive-reverse [1 2 3])" "(empty? nil)" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  '()]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (first coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (first coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      [acc]\\r\\n      (recur (rest coll) (first coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(recursive-reverse [1 2 3 4 5])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      [acc]\\r\\n      (recur (rest coll) (conj (rest coll) (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(recursive-reverse [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (conj (rest coll) (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         ]\\r\\n    (if (empty? coll)\\r\\n      coll\\r\\n      (recur (conj (rest coll) (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(run)" "(conj [1 2 3 ] [ 1 2 3])" "([1 2 3] [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (conj (acc) (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(run)" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (first coll))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(run)" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (conj (coll) (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      [acc]\\r\\n      (recur (rest coll) (conj acc (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(recursive-reverse [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (conj acc (first coll)))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse [1])" "(recursive-reverse [1 2 3])" "(defn recursive-reverse [coll]\\r\\n  (loop [coll coll\\r\\n         acc  []]\\r\\n    (if (empty? coll)\\r\\n      acc\\r\\n      (recur (rest coll) (cons (first coll) acc))\\r\\n      )\\r\\n    )\\r\\n  )" "(recursive-reverse '(1 2 3 ))" "(defn factorial [n]\\r\\n  (case n\\r\\n    (> 2 n) 1\\r\\n    n\\r\\n    ))" "(factorial 1)" "(factorial 2)" "(< 2 2)" "(- 100 1 2 3 )" "(defn factorial [n]\\r\\n  (if (< n 2)\\r\\n    1\\r\\n    (* (factorial (- n 1)) (factorial (- n 2)))\\r\\n    ))" "(factorial 2)" "(drop 1 (range 5))" "(reduce * (range 5))" "(reduce * (drop 1 (range 5)))" "(range 2)" "(str \:foo \:bar)" "(reduce (str \\"aka\\") [\\"a\\" \\"ba\\" \\"c\\"])" "(str [\\"a\\"])" "(str \\"a\\")" "dir" "(dir str)" "(map \#(str \\"aka \\" %) [\\"bob\\" \\"joe\\"])" "(reduce str (map \#(str \\"aka \\" %) [\\"bob\\" \\"joe\\"]))" "(reduce str (map \#(str \\" aka \\" %) [\\"bob\\" \\"joe\\"]))" "(def kik [[first-name last-name & aliases]] \\n  (str first-name last-name (reduce str (map \#(str \\" aka \\" %) aliases))))" "(defn kik [[first-name last-name & aliases]] \\r\\n     (str first-name last-name (reduce str (map \#(str \\" aka \\" %) aliases))))" "(kik [\\"Bob\\" \\"the Builder\\" \\"of doom\\"])" "((reduce str (map \#(str \\" aka \\" %) aliases)) [\\"bob\\" \\"cat\\" \\"hello\\"])" "\\n(reduce str (map \#(str \\" aka \\" %) [\\"bob\\" \\"cat\\" \\"hello\\"]))" "(drop 5 (reduce str (map \#(str \\" aka \\" %) [\\"bob\\" \\"cat\\" \\"hello\\"])))" "(reduce str (drop 5 (reduce str (map \#(str \\" aka \\" %) [\\"bob\\" \\"cat\\" \\"hello\\"]))))" "({\:bob \\"hello\\"} \:bob)" "(run)" "(an airbag saved my life)" "(defn cake (let [{\:keys [street-address & rest-of-addr]} test-address]\\r\\n            (str (first test-address))))" "(defn cake [x] (let [{\:keys [street-address & rest-of-addr]} test-address]\\r\\n            (str (first test-address))))" "(cake [4])" "(defn cake [x] (let [{\:keys [street-address & rest-of-addr]} test-address]\\n                 \\r\\n            (str (first (test-address \:keys)))))" "(cake 5)" "(def x [{\:keys [\\"bob\\" \\"joan\\" \\"hillory\\"]}])" "(x \:keys)" "(get x \:keys)" "(puts \\"ok\\")" "(print \\"ok\\")" "(test-address)" "(def test-address\\r\\n  {\:street-address \\"123 Test Lane\\"\\r\\n   \:city \\"Testerville\\"\\r\\n   \:state \\"TX\\"})" "(test-address)" "(test-address \:street-address)" "(defn merge [[first-name last-name] [address]] ((let [{\:keys [street-address city state]} address]\\r\\n                                                (str first-name \\" \\" last-name \\", \\" street-address \\", \\" city \\", \\" state)\\r\\n                                                )\\r\\n                                               ))" "(defn merge-addr [[first-name last-name] [address]] ((let [{\:keys [street-address city state]} address]\\r\\n                                                (str first-name \\" \\" last-name \\", \\" street-address \\", \\" city \\", \\" state)\\r\\n                                                )\\r\\n                                               ))" "(merge-addr [\\"test\\" \\"testerson\\"] [\\"addr\\" \\"city\\" \\"state\\"])" "(merge-addr [\\"test\\" \\"testerson\\"] {\:street-address \\"addr\\" \:city \\"city\\" \:state \\"state\\"})" "(defn merge-addr [[f l] [a]] (print f))" "(merge-addr [3 6])" "(merge-addr [3 5] [2])" "((fn [name address] (let [{\:keys [street-address city state]} address]\\r\\n                           (print name) \\r\\n                           )) [\\"Test\\" \\"Testerson\\"] test-address)" "(len \\"t5\\")" "(length \\"t5\\")" "(size \\"5t\\")" "(count \\"t3\\")" "(run)" "(dir assoc)" "(assoc)" "(assoc [1])" "(assoc 1 2)" "(\:keys ({\:hello \\"bob\\"}))" "(assoc {} \:cake \\"bob\\")" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (\:keys the-world)))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         ({})))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (0 1)))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         ({})))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (\:keys the-world)))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (\:jerry the-world)))" "(assoc (assoc {} \:cake \\"bob\\") \:cake \\"bob\\")" "(assoc (assoc {} \:cake \\"bob\\") \:cake \\"hello\\")" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         ({} {})))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (\:jerry \:jerry)))" "(the-world)" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (vals @the-world)))" "(do\\r\\n       (dosync\\r\\n         (ref-set the-world {})\\r\\n         (alter the-world assoc \:jerry \\"Real Jerry\\")\\r\\n         (alter bizarro-world assoc \:jerry \\"Bizarro Jerry\\")\\r\\n         (map \:jerry @the-world @bizarro-world)\\r\\n         \\r\\n         ))" "(run)" "(defn add-four (partial + 4))" "(def cow (atom 5))" "(do (compare-and-set\! cow 100 \:fin) @cow)" "(second 5)" "(9 + 1)" "(defmacro infix [form] (list (second form) (first form) (nth form 2)))" "(infix (9 + 1))" "(macroexpand '(infix (9 + 1)))" "(defmacro infix-better [form]\\r\\n  `(~(second form) ; Note the syntax-quote (`) and unquote (~) characters\!\\r\\n    ~(first form)\\r\\n    ~(nth form 2) ))" "(infix-better (10 * 2))" "(macroexpand '(infix-better (10 * 2)))" "(second (10 + 2))" "(second '(10 + 2))" "(infix (9 + 1))" "(defmacro infix-better [form]\\r\\n  `(~(second form) ; Note the syntax-quote (`) and unquote (~) characters\!\\r\\n    ~(first form)\\r\\n    ~(nth form 2) ))" "(macroexpand '(infix-better (10 + (2 * 3))))" "(seq? 1)" "(seq? [1 2])" "(with-out-str (print \\"cow\\"))" "(deftype Razzie [category]\\r\\n  Award\\r\\n  (present [this recipient]\\r\\n    (print (str \\"You're really the \\"\\r\\n                (\:category this) \\", \\"\\r\\n                recipient \\"... sorry.\\"\\r\\n                ))))" "\\r\\n(defprotocol Award\\r\\n  (present [this recipient]))" "(deftype Razzie [category]\\r\\n  Award\\r\\n  (present [this recipient]\\r\\n    (print (str \\"You're really the \\"\\r\\n                (\:category this) \\", \\"\\r\\n                recipient \\"... sorry.\\"\\r\\n                ))))" "(with-out-str (present (Razzie. \\"Worst Picture\\") \\"Final Destination 5\\"))" "(javadoc \\"warfare\\")"]
eclipse.preferences.version=1
